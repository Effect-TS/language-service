// Result of running refactor typeToEffectSchema at position 4:21
import * as Schema from "effect/Schema"

export const MyStruct = Schema.Struct({
    anyProp: Schema.Any,
    bigintProp: Schema.BigInt,
    booleanProp: Schema.Boolean,
    neverProp: Schema.Never,
    nullProp: Schema.Null,
    numberProp: Schema.Number,
    stringProp: Schema.String,
    undefinedProp: Schema.Undefined,
    unknownProp: Schema.Unknown,
    voidProp: Schema.Void,
    arrayTypeProp: Schema.Array(Schema.String),
    arrayProp: Schema.Array(Schema.String),
    dateProp: Schema.Date,
    trueProp: Schema.Literal(true),
    falseProp: Schema.Literal(false),
    literalProp: Schema.Literal("hello"),
    numericLiteralProp: Schema.Literal(42),
    unionProp: Schema.Union(Schema.String, Schema.Boolean),
    intersectionProp: Schema.Struct({
        a: Schema.String
    }).pipe(Schema.extend(Schema.Struct({
        b: Schema.Number
    }))),
    keyofProp: Schema.keyof(Schema.Struct({
        a: Schema.String,
        b: Schema.Boolean
    })),
    recordProp: Schema.Record({ key: Schema.String, value: Schema.Number }),
    inlineStruct: Schema.Struct({
        a: Schema.String,
        b: Schema.Number
    }),
    otherReference: MyUnion,
    otherWithArguments:  /* Not supported conversion: MyType<string, boolean> */,
    // single line comment
    prop: Schema.String,
    /**
     * Multiline comment
     */
    prop2: Schema.String
})

export interface MyStruct {
    anyProp: any
    bigintProp: bigint
    booleanProp: boolean
    neverProp: never
    nullProp: null
    numberProp: number
    stringProp: string
    undefinedProp: undefined
    unknownProp: unknown
    voidProp: void
    arrayTypeProp: string[]
    arrayProp: Array<string>
    dateProp: Date
    trueProp: true
    falseProp: false
    literalProp: "hello"
    numericLiteralProp: 42
    unionProp: string | boolean
    intersectionProp: {a: string} & {b: number}
    keyofProp: keyof {a: string, b: boolean}
    recordProp: Record<string, number>
    inlineStruct: {a: string, b: number}
    otherReference: MyUnion
    otherWithArguments: MyType<string, boolean>
    // single line comment
    prop: string
    /**
     * Multiline comment
     */
    prop2: string
}

type MyUnion = "A" | "B"
interface MyType<A, B>{
    _A: A
    _B: B
}
