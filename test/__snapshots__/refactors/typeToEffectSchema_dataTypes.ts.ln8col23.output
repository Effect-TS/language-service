// Result of running refactor typeToEffectSchema at position 8:23
import * as Option from "effect/Option"
import * as Either from "effect/Either"
import * as Chunk from "effect/Chunk"
import * as Duration from "effect/Duration"
import * as Schema from "effect/Schema"

export const MyStruct = Schema.Struct({
    optionProp: Schema.Option(Schema.String),
    eitherProp: Schema.Either({ right: Schema.Number, left: Schema.String }),
    pickProp: Schema.Struct({
        a: Schema.String,
        b: Schema.Boolean
    }).pipe(Schema.pick("a")),
    omitProp: Schema.Struct({
        a: Schema.String,
        b: Schema.Boolean
    }).pipe(Schema.omit("b")),
    chunkProp: Schema.Chunk(Schema.String),
    durationProp: Schema.Duration
})

export interface MyStruct {
    optionProp: Option.Option<string>
    eitherProp: Either.Either<number, string>
    pickProp: Pick<{a: string, b: boolean}, "a">
    omitProp: Omit<{a: string, b: boolean}, "b">
    chunkProp: Chunk.Chunk<string>
    durationProp: Duration.Duration
}
