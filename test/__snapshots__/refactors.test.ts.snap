// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`asyncAwaitToGen.ts > asyncAwaitToGen.ts at 4:28 1`] = `
"// Result of running refactor effect/asyncAwaitToGen at position 4:28
import * as T from "effect/Effect"

export function refactorMe(arg: string) {
    return T.gen(function*() {
        return yield* T.promise(() => Promise.resolve(1))
    })
}
"
`;

exports[`asyncAwaitToGen_anonymous.ts > asyncAwaitToGen_anonymous.ts at 4:44 1`] = `
"// Result of running refactor effect/asyncAwaitToGen at position 4:44
import * as Effect from "effect/Effect"

const asyncFunctionDeclaration = function() {
    return Effect.gen(function*() {
        const response = yield* Effect.promise(() => fetch("test"))
        if (response.ok) {
            const y = yield* Effect.promise(() => response.json())
            return y
        }
        return null
    })
}

const asyncArrowFunctionExpression = async () => {
  const response = await fetch("test")
  if (response.ok) {
    const y = await response.json()
    return y
  }
  return null
}
"
`;

exports[`asyncAwaitToGen_anonymous.ts > asyncAwaitToGen_anonymous.ts at 13:41 1`] = `
"// Result of running refactor effect/asyncAwaitToGen at position 13:41
import * as Effect from "effect/Effect"

const asyncFunctionDeclaration = async function() {
  const response = await fetch("test")
  if (response.ok) {
    const y = await response.json()
    return y
  }
  return null
}

const asyncArrowFunctionExpression = () => Effect.gen(function*() {
    const response = yield* Effect.promise(() => fetch("test"))
    if (response.ok) {
        const y = yield* Effect.promise(() => response.json())
        return y
    }
    return null
})
"
`;

exports[`asyncAwaitToGen_namedImport.ts > asyncAwaitToGen_namedImport.ts at 4:28 1`] = `
"// Result of running refactor effect/asyncAwaitToGen at position 4:28
import { Effect as T } from "effect"

export function refactorMe(arg: string) {
    return T.gen(function*() {
        return yield* T.promise(() => Promise.resolve(1))
    })
}
"
`;

exports[`asyncAwaitToGen_reExport.ts > asyncAwaitToGen_reExport.ts at 4:28 1`] = `
"// Result of running refactor effect/asyncAwaitToGen at position 4:28
import { Eff } from "@/utils/reExport.js"

export function refactorMe(arg: string) {
    return Eff.gen(function*() {
        return yield* Eff.promise(() => Promise.resolve(1))
    })
}
"
`;

exports[`asyncAwaitToGenTryPromise.ts > asyncAwaitToGenTryPromise.ts at 4:28 1`] = `
"// Result of running refactor effect/asyncAwaitToGenTryPromise at position 4:28
import * as Effect from "effect/Effect"

export function refactorMe(arg: string) {
    return Effect.gen(function*() {
        for (let i = 0; i < 10; i++) {
            yield* Effect.tryPromise({ try: () => Promise.resolve(i), catch: error => ({ _tag: "Error1" as const, error }) })
        }
        return yield* Effect.tryPromise({ try: () => Promise.resolve(arg), catch: error => ({ _tag: "Error2" as const, error }) })
    })
}
"
`;

exports[`asyncAwaitToGenTryPromise_anonymous.ts > asyncAwaitToGenTryPromise_anonymous.ts at 4:44 1`] = `
"// Result of running refactor effect/asyncAwaitToGenTryPromise at position 4:44
import * as Effect from "effect/Effect"

const asyncFunctionDeclaration = function() {
    return Effect.gen(function*() {
        const response = yield* Effect.tryPromise({ try: () => fetch("test"), catch: error => ({ _tag: "Error1" as const, error }) })
        if (response.ok) {
            const y = yield* Effect.tryPromise({ try: () => response.json(), catch: error => ({ _tag: "Error2" as const, error }) })
            return y
        }
        return null
    })
}

const asyncArrowFunctionExpression = async () => {
  const response = await fetch("test")
  if (response.ok) {
    const y = await response.json()
    return y
  }
  return null
}
"
`;

exports[`asyncAwaitToGenTryPromise_anonymous.ts > asyncAwaitToGenTryPromise_anonymous.ts at 13:41 1`] = `
"// Result of running refactor effect/asyncAwaitToGenTryPromise at position 13:41
import * as Effect from "effect/Effect"

const asyncFunctionDeclaration = async function() {
  const response = await fetch("test")
  if (response.ok) {
    const y = await response.json()
    return y
  }
  return null
}

const asyncArrowFunctionExpression = () => Effect.gen(function*() {
    const response = yield* Effect.tryPromise({ try: () => fetch("test"), catch: error => ({ _tag: "Error1" as const, error }) })
    if (response.ok) {
        const y = yield* Effect.tryPromise({ try: () => response.json(), catch: error => ({ _tag: "Error2" as const, error }) })
        return y
    }
    return null
})
"
`;

exports[`effectGenToFn.ts > effectGenToFn.ts at 4:36 1`] = `
"// Result of running refactor effect/effectGenToFn at position 4:36
import * as Eff from "effect/Effect"

export const program = Eff.fn(function*() {
    const a = yield* Eff.succeed(1)
    const b = yield* Eff.succeed(2)
    return a + b
})

export const programWithPipes = (fa: number, fb: number) => Eff.gen(function* () {
    const a = yield* Eff.succeed(fa)
    const b = yield* Eff.succeed(fb)
    return a + b
}).pipe(
    Eff.map((a) => a + 1)
)

export function sampleReturns<A extends number, B extends number>(arg1: A, arg2: B) {
  return Eff.gen(function* () {
    const a = yield* Eff.succeed(arg1)
    const b = yield* Eff.succeed(arg2)
    return a + b
  })
}

export const sampleReturnsConciseBody = <A extends number, B extends number>(arg1: A, arg2: B) => Eff.gen(function* () {
  const a = yield* Eff.succeed(arg1)
  const b = yield* Eff.succeed(arg2)
  return a + b
})
"
`;

exports[`effectGenToFn.ts > effectGenToFn.ts at 10:67 1`] = `
"// Result of running refactor effect/effectGenToFn at position 10:67
import * as Eff from "effect/Effect"

export const program = () => Eff.gen(function* () {
    const a = yield* Eff.succeed(1)
    const b = yield* Eff.succeed(2)
    return a + b
  })

export const programWithPipes = Eff.fn(function*(fa: number, fb: number) {
    const a = yield* Eff.succeed(fa)
    const b = yield* Eff.succeed(fb)
    return a + b
}, Eff.map((a) => a + 1))

export function sampleReturns<A extends number, B extends number>(arg1: A, arg2: B) {
  return Eff.gen(function* () {
    const a = yield* Eff.succeed(arg1)
    const b = yield* Eff.succeed(arg2)
    return a + b
  })
}

export const sampleReturnsConciseBody = <A extends number, B extends number>(arg1: A, arg2: B) => Eff.gen(function* () {
  const a = yield* Eff.succeed(arg1)
  const b = yield* Eff.succeed(arg2)
  return a + b
})
"
`;

exports[`effectGenToFn.ts > effectGenToFn.ts at 19:16 1`] = `
"// Result of running refactor effect/effectGenToFn at position 19:16
import * as Eff from "effect/Effect"

export const program = () => Eff.gen(function* () {
    const a = yield* Eff.succeed(1)
    const b = yield* Eff.succeed(2)
    return a + b
  })

export const programWithPipes = (fa: number, fb: number) => Eff.gen(function* () {
    const a = yield* Eff.succeed(fa)
    const b = yield* Eff.succeed(fb)
    return a + b
}).pipe(
    Eff.map((a) => a + 1)
)

export const sampleReturns = Eff.fn("sampleReturns")(function* <A extends number, B extends number>(arg1: A, arg2: B) {
    const a = yield* Eff.succeed(arg1)
    const b = yield* Eff.succeed(arg2)
    return a + b
})

export const sampleReturnsConciseBody = <A extends number, B extends number>(arg1: A, arg2: B) => Eff.gen(function* () {
  const a = yield* Eff.succeed(arg1)
  const b = yield* Eff.succeed(arg2)
  return a + b
})
"
`;

exports[`effectGenToFn.ts > effectGenToFn.ts at 26:104 1`] = `
"// Result of running refactor effect/effectGenToFn at position 26:104
import * as Eff from "effect/Effect"

export const program = () => Eff.gen(function* () {
    const a = yield* Eff.succeed(1)
    const b = yield* Eff.succeed(2)
    return a + b
  })

export const programWithPipes = (fa: number, fb: number) => Eff.gen(function* () {
    const a = yield* Eff.succeed(fa)
    const b = yield* Eff.succeed(fb)
    return a + b
}).pipe(
    Eff.map((a) => a + 1)
)

export function sampleReturns<A extends number, B extends number>(arg1: A, arg2: B) {
  return Eff.gen(function* () {
    const a = yield* Eff.succeed(arg1)
    const b = yield* Eff.succeed(arg2)
    return a + b
  })
}

export const sampleReturnsConciseBody = Eff.fn(function* <A extends number, B extends number>(arg1: A, arg2: B) {
    const a = yield* Eff.succeed(arg1)
    const b = yield* Eff.succeed(arg2)
    return a + b
})
"
`;

exports[`functionToArrow.ts > functionToArrow.ts at 5:20 1`] = `
"// Result of running refactor effect/functionToArrow at position 5:20
/**
 * Docs
 */
export const myTest = (name: string) => name.length

/**
 * Docs
 */
export function myTest2(name: string) {
  if (name === "LOL") return 42
  return name.length
}

class Sample {
  /**
   * Docs
   */
  test(name: string) {
    return name.length
  }
}
"
`;

exports[`functionToArrow.ts > functionToArrow.ts at 12:20 1`] = `
"// Result of running refactor effect/functionToArrow at position 12:20
/**
 * Docs
 */
export function myTest(name: string) {
  return name.length
}

/**
 * Docs
 */
export const myTest2 = (name: string) => {
    if (name === "LOL") return 42
    return name.length
}

class Sample {
  /**
   * Docs
   */
  test(name: string) {
    return name.length
  }
}
"
`;

exports[`functionToArrow.ts > functionToArrow.ts at 21:5 1`] = `
"// Result of running refactor effect/functionToArrow at position 21:5
/**
 * Docs
 */
export function myTest(name: string) {
  return name.length
}

/**
 * Docs
 */
export function myTest2(name: string) {
  if (name === "LOL") return 42
  return name.length
}

class Sample {
  /**
   * Docs
   */
  /**
     * Docs
     */
    test = (name: string) => name.length
}
"
`;

exports[`pipeableToDatafirst.ts > pipeableToDatafirst.ts at 5:16 1`] = `
"// Result of running refactor effect/pipeableToDatafirst at position 5:16
import * as T from "effect/Effect"
import { pipe } from "effect/Function"

const test = T.map(T.zipRight(T.flatMap(T.succeed("Hello"), (_) => T.log(_)), T.succeed(42)), (_) => _ * 2)

const noDataFirst = (value: string) => <A, E, R>(eff: T.Effect<A, E, R>) => pipe(eff, T.zipLeft(T.log(value)))

const test2 = pipe(
  T.succeed("Hello"),
  T.flatMap((_) => T.log(_)),
  noDataFirst("42")
)

const test3 = pipe(
  T.succeed("Hello"),
  T.flatMap((_) => T.log(_)),
  noDataFirst("a"),
  noDataFirst("b"),
  noDataFirst("c")
)
"
`;

exports[`pipeableToDatafirst.ts > pipeableToDatafirst.ts at 14:16 1`] = `
"// Result of running refactor effect/pipeableToDatafirst at position 14:16
import * as T from "effect/Effect"
import { pipe } from "effect/Function"

const test = pipe(
  T.succeed("Hello"),
  T.flatMap((_) => T.log(_)),
  T.zipRight(T.succeed(42)),
  T.map((_) => _ * 2)
)

const noDataFirst = (value: string) => <A, E, R>(eff: T.Effect<A, E, R>) => pipe(eff, T.zipLeft(T.log(value)))

const test2 = pipe(T.flatMap(T.succeed("Hello"), (_) => T.log(_)), noDataFirst("42"))

const test3 = pipe(
  T.succeed("Hello"),
  T.flatMap((_) => T.log(_)),
  noDataFirst("a"),
  noDataFirst("b"),
  noDataFirst("c")
)
"
`;

exports[`pipeableToDatafirst.ts > pipeableToDatafirst.ts at 20:16 1`] = `
"// Result of running refactor effect/pipeableToDatafirst at position 20:16
import * as T from "effect/Effect"
import { pipe } from "effect/Function"

const test = pipe(
  T.succeed("Hello"),
  T.flatMap((_) => T.log(_)),
  T.zipRight(T.succeed(42)),
  T.map((_) => _ * 2)
)

const noDataFirst = (value: string) => <A, E, R>(eff: T.Effect<A, E, R>) => pipe(eff, T.zipLeft(T.log(value)))

const test2 = pipe(
  T.succeed("Hello"),
  T.flatMap((_) => T.log(_)),
  noDataFirst("42")
)

const test3 = pipe(T.flatMap(T.succeed("Hello"), (_) => T.log(_)), noDataFirst("a"),
    noDataFirst("b"),
    noDataFirst("c"))
"
`;

exports[`toggleLazyConst.ts > toggleLazyConst.ts at 3:10 1`] = `
"// Result of running refactor effect/toggleLazyConst at position 3:10

const test1 = () => 1

const test2 = () => 1

const test3 = () => {
    console.log("Hello")
}
"
`;

exports[`toggleLazyConst.ts > toggleLazyConst.ts at 5:10 1`] = `
"// Result of running refactor effect/toggleLazyConst at position 5:10

const test1 = 1

const test2 = 1

const test3 = () => {
    console.log("Hello")
}
"
`;

exports[`toggleLazyConst.ts > toggleLazyConst.ts at 7:10 1`] = `
"// Result of running refactor effect/toggleLazyConst at position 7:10

const test1 = 1

const test2 = () => 1

const test3 = () => {
    console.log("Hello")
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 4:32 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 4:32
import * as T from "effect/Effect"

export const test1 = (): T.Effect<number, never, never> => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 6:32 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 6:32
import * as T from "effect/Effect"

export const test1 = () => T.succeed(42)

export const test2 = (): false | T.Effect<number, never, never> => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 8:32 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 8:32
import * as T from "effect/Effect"

export const test1 = () => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A): T.Effect<never, A, never> {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 12:18 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 12:18
import * as T from "effect/Effect"

export const test1 = () => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation(){
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 16:18 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 16:18
import * as T from "effect/Effect"

export const test1 = () => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace() {
  return 42
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 4:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 4:16
import * as T from "effect/Effect"

export const test1: <A>(value: A) => T.Effect<A> = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 5:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 5:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2: T.Effect<never, string, never> = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 8:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 8:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3: 42 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 11:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 11:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4: () => number = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 12:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 12:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5: (defect: unknown) => T.Effect<never> = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 14:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 14:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 15:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 15:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 20:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 20:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6: {
    (a: 1): boolean;
    (a: 2): string
} = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 24:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 24:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7: {
    (a: 1): boolean;
    (a: 2): string
} = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 38:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 38:16
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8: {
    (a: 1): boolean;
    (b: 2): string;
    (a: 3): number;
    (b: 4): bigint
} = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 41:15 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 41:15
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd: "hello" = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 42:15 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 42:15
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove = "hello"
    propAdd = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 43:9 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 43:9
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd: "hello" = "hello"
    propRemove: string = "hello"    
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 44:9 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 44:9
import * as T from "effect/Effect"

export const test1 = T.succeed
export const test2 = T.fail("LOL")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection

declare const intersection1: {
    (a: 1): boolean
    (b: 2): string
}

declare const intersection2: {
    (a: 3): number
    (b: 4): bigint
}

declare function intersect<A, B>(a: A, b: B): A & B

export const test8 = intersect(intersection1, intersection2)

class Test {
    static liveAdd = "hello"
    static liveRemove: string = "hello"
    propAdd = "hello"
    propRemove = "hello"    
}
"
`;

exports[`toggleTypeAnnotation_schema.ts > toggleTypeAnnotation_schema.ts at 11:15 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 11:15
import * as Schema from "effect/Schema"
import * as ParseResult from "effect/ParseResult"
import * as ParseOption from "effect/SchemaAST"
import * as Effect from "effect/Effect"

class Person extends Schema.TaggedClass<Person>("Person")("Person", {
    name: Schema.NonEmptyString,
    age: Schema.Int
}){
    static decode: (i: { readonly name: string; readonly age: number; readonly _tag: "Person" }, overrideOptions?: ParseOption.ParseOptions) => Effect.Effect<Person, ParseResult.ParseError, never> = Schema.decode(Person)
}
"
`;

exports[`wrapWithPipe.ts > wrapWithPipe.ts at 2:13-2:26 1`] = `
"// Result of running refactor effect/wrapWithPipe at position 2:13-2:26
const txt = pipe("Hello World")
const txt2 = "Hello"
"
`;

exports[`wrapWithPipe.ts > wrapWithPipe.ts at 3:14-3:21 1`] = `
"// Result of running refactor effect/wrapWithPipe at position 3:14-3:21
const txt = "Hello World"
const txt2 = pipe("Hello")
"
`;
