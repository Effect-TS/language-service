// Vitest Snapshot v1

exports[`asyncAwaitToGen.ts > asyncAwaitToGen.ts at 4:28 1`] = `
"// Result of running refactor effect/asyncAwaitToGen at position 4:28
import * as T from \\"@effect/io/Effect\\"

export function refactorMe(arg: string) {
    return T.gen(function*($) {
        return yield* $(T.promise(Promise.resolve(1)))
    })
}
"
`;

exports[`asyncAwaitToGenTryPromise.ts > asyncAwaitToGenTryPromise.ts at 4:28 1`] = `
"// Result of running refactor effect/asyncAwaitToGenTryPromise at position 4:28
import * as Effect from \\"@effect/io/Effect\\"

export function refactorMe(arg: string) {
    return Effect.gen(function*($) {
        for (let i = 0; i < 10; i++) {
            yield* $(Effect.tryCatchPromise(() => Promise.resolve(i), error => ({ _tag: \\"Error1\\" as const, error })))
        }
        return yield* $(Effect.tryCatchPromise(() => Promise.resolve(arg), error => ({ _tag: \\"Error2\\" as const, error })))
    })
}
"
`;

exports[`functionToArrow.ts > functionToArrow.ts at 5:20 1`] = `
"// Result of running refactor effect/functionToArrow at position 5:20
/**
 * Docs
 */
export const myTest = (name: string) => name.length

/**
 * Docs
 */
export function myTest2(name: string) {
  if (name === \\"LOL\\") return 42
  return name.length
}

class Sample {
  /**
   * Docs
   */
  test(name: string) {
    return name.length
  }
}
"
`;

exports[`functionToArrow.ts > functionToArrow.ts at 12:20 1`] = `
"// Result of running refactor effect/functionToArrow at position 12:20
/**
 * Docs
 */
export function myTest(name: string) {
  return name.length
}

/**
 * Docs
 */
export const myTest2 = (name: string) => {
    if (name === \\"LOL\\")
        return 42
    return name.length
}

class Sample {
  /**
   * Docs
   */
  test(name: string) {
    return name.length
  }
}
"
`;

exports[`functionToArrow.ts > functionToArrow.ts at 21:5 1`] = `
"// Result of running refactor effect/functionToArrow at position 21:5
/**
 * Docs
 */
export function myTest(name: string) {
  return name.length
}

/**
 * Docs
 */
export function myTest2(name: string) {
  if (name === \\"LOL\\") return 42
  return name.length
}

class Sample {
  /**
   * Docs
   */
  /**
     * Docs
     */
    test = (name: string) => name.length
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 4:32 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 4:32
import * as T from \\"@effect/io/Effect\\"

export const test1 = (): T.Effect<never, never, number> => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 6:32 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 6:32
import * as T from \\"@effect/io/Effect\\"

export const test1 = () => T.succeed(42)

export const test2 = (): false | T.Effect<never, never, number> => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 8:32 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 8:32
import * as T from \\"@effect/io/Effect\\"

export const test1 = () => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A): T.Effect<never, A, never> {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 12:18 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 12:18
import * as T from \\"@effect/io/Effect\\"

export const test1 = () => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation(){
  return 42
}

function removeAnnotationWithSpace(): number {
  return 42
}
"
`;

exports[`toggleReturnTypeAnnotation.ts > toggleReturnTypeAnnotation.ts at 16:18 1`] = `
"// Result of running refactor effect/toggleReturnTypeAnnotation at position 16:18
import * as T from \\"@effect/io/Effect\\"

export const test1 = () => T.succeed(42)

export const test2 = () => (true ? T.succeed(42) : false)

function sillyGenerics<A>(value: A) {
  return T.fail(value)
}

function removeAnnotation():number{
  return 42
}

function removeAnnotationWithSpace() {
  return 42
}
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 4:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 4:16
import * as T from \\"@effect/io/Effect\\"

export const test1: <A>(value: A) => T.Effect<never, never, A> = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 5:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 5:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2: T.Effect<never, string, never> = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 8:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 8:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3: 42 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 11:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 11:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4: () => number = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 12:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 12:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5: (defect: unknown) => T.Effect<never, never, never> = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 14:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 14:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 15:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 15:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 20:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 20:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6: { (a: 1): boolean; (a: 2): string } = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7 = functIntersection
"
`;

exports[`toggleTypeAnnotation.ts > toggleTypeAnnotation.ts at 24:16 1`] = `
"// Result of running refactor effect/toggleTypeAnnotation at position 24:16
import * as T from \\"@effect/io/Effect\\"

export const test1 = T.succeed
export const test2 = T.fail(\\"LOL\\")

const predefined = 42
export const test3 = predefined

const callable = () => 42
export const test4 = callable
export const test5 = T.die

const removeAnnotation:number=42
const removeAnnotationWithSpace: number = 42

declare function withOverloads(a: 1): boolean
declare function withOverloads(a: 2): string

export const test6 = withOverloads

declare const functIntersection: ((a: 1) => boolean) & ((a: 2) => string)

export const test7: {
    (a: 1): boolean;
    (a: 2): string
} = functIntersection
"
`;

exports[`wrapWithPipe.ts > wrapWithPipe.ts at 2:13-2:26 1`] = `
"// Result of running refactor effect/wrapWithPipe at position 2:13-2:26
const txt = pipe(\\"Hello World\\")
const txt2 = \\"Hello\\"
"
`;

exports[`wrapWithPipe.ts > wrapWithPipe.ts at 3:14-3:21 1`] = `
"// Result of running refactor effect/wrapWithPipe at position 3:14-3:21
const txt = \\"Hello World\\"
const txt2 = pipe(\\"Hello\\")
"
`;
