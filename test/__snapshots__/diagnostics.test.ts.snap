// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Diagnostic floatingEffect > floatingEffect.ts > diagnostic output 1`] = `
"Effect.succeed("floating")
5:0 - 5:26 | 1 | Effect must be yielded or assigned to a variable.

Effect.never
7:0 - 7:12 | 1 | Effect must be yielded or assigned to a variable.

Effect.never
11:4 - 11:16 | 1 | Effect must be yielded or assigned to a variable."
`;

exports[`Diagnostic floatingEffect > floatingEffect_disabled.ts > diagnostic output 1`] = `
"Effect.succeed(1)
4:0 - 4:17 | 0 | Effect must be yielded or assigned to a variable.

Effect.succeed(1)
12:0 - 12:17 | 1 | Effect must be yielded or assigned to a variable.

Effect.succeed(1)
16:0 - 16:17 | 2 | Effect must be yielded or assigned to a variable."
`;

exports[`Diagnostic missingEffectContext > missingEffectContext_arrowReturnType.ts > diagnostic output 1`] = `
"Effect.void.pipe(Effect.andThen(eff))
18:109 - 18:146 | 1 | Missing 'R' in the expected Effect context."
`;

exports[`Diagnostic missingEffectContext > missingEffectContext_callExpression.ts > diagnostic output 1`] = `
"effectWithServices
22:7 - 22:25 | 1 | Missing 'ServiceA | ServiceB | ServiceC' in the expected Effect context.

effectWithServices
29:20 - 29:38 | 1 | Missing 'ServiceC' in the expected Effect context."
`;

exports[`Diagnostic missingEffectContext > missingEffectContext_conciseBody.ts > diagnostic output 1`] = `
"effectWithServices
10:62 - 10:80 | 1 | Missing 'ServiceA' in the expected Effect context."
`;

exports[`Diagnostic missingEffectContext > missingEffectContext_lazy.ts > diagnostic output 1`] = `
"return Effect.onExit(evaluate(), () => Effect.void)
20:2 - 20:53 | 1 | Missing 'ServiceA' in the expected Effect context."
`;

exports[`Diagnostic missingEffectContext > missingEffectContext_plainAssignment.ts > diagnostic output 1`] = `
"missingAllServices
21:13 - 21:31 | 1 | Missing 'ServiceA | ServiceB | ServiceC' in the expected Effect context.

missingServiceC
24:13 - 24:28 | 1 | Missing 'ServiceC' in the expected Effect context.

missingServiceCWithSubtyping
29:13 - 29:41 | 1 | Missing 'ServiceC' in the expected Effect context.

missingServiceA
33:10 - 33:25 | 1 | Missing 'A' in the expected Effect context.

effectWithServices
38:10 - 38:28 | 1 | Missing 'ServiceA | ServiceB | ServiceC' in the expected Effect context."
`;

exports[`Diagnostic missingEffectContext > missingEffectContext_returnSignature.ts > diagnostic output 1`] = `
"return effectWithServices
19:4 - 19:29 | 1 | Missing 'ServiceA | ServiceB | ServiceC' in the expected Effect context.

effectWithServices
23:62 - 23:80 | 1 | Missing 'ServiceA | ServiceB | ServiceC' in the expected Effect context.

effectWithServices
26:105 - 26:123 | 1 | Missing 'ServiceC' in the expected Effect context."
`;

exports[`Diagnostic missingEffectError > missingEffectError_callExpression.ts > diagnostic output 1`] = `
"effectWithErrors
23:7 - 23:23 | 1 | Missing 'ErrorA | ErrorB | ErrorC' in the expected Effect errors.

effectWithErrors
30:20 - 30:36 | 1 | Missing 'ErrorC' in the expected Effect errors."
`;

exports[`Diagnostic missingEffectError > missingEffectError_plainAssignment.ts > diagnostic output 1`] = `
"missingAllErrors
21:13 - 21:29 | 1 | Missing 'ErrorA | ErrorB | ErrorC' in the expected Effect errors.

missingErrorC
24:13 - 24:26 | 1 | Missing 'ErrorC' in the expected Effect errors.

missingErrorCWithSubtyping
29:13 - 29:39 | 1 | Missing 'ErrorC' in the expected Effect errors.

missingErrorA
33:10 - 33:23 | 1 | Missing 'A' in the expected Effect errors.

effectWithErrors
38:10 - 38:26 | 1 | Missing 'ErrorA | ErrorB | ErrorC' in the expected Effect errors."
`;

exports[`Diagnostic missingEffectError > missingEffectError_returnSignature.ts > diagnostic output 1`] = `
"return effectWithErrors
20:4 - 20:27 | 1 | Missing 'ErrorA | ErrorB | ErrorC' in the expected Effect errors.

effectWithErrors
24:62 - 24:78 | 1 | Missing 'ErrorA | ErrorB | ErrorC' in the expected Effect errors.

effectWithErrors
27:94 - 27:110 | 1 | Missing 'ErrorC' in the expected Effect errors."
`;

exports[`Diagnostic missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > diagnostic output 1`] = `
"function
8:38 - 8:46 | 1 | Seems like you used yield instead of yield* inside this Effect.gen.

yield Effect.succeed(1)
9:4 - 9:27 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield.

function
13:46 - 13:54 | 1 | Seems like you used yield instead of yield* inside this Effect.gen.

yield Effect.succeed(1)
14:4 - 14:27 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield.

yield Effect.succeed(2)
15:4 - 15:27 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield.

function
20:22 - 20:30 | 1 | Seems like you used yield instead of yield* inside this Effect.gen.

yield Effect.succeed(1)
21:8 - 21:31 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield.

function
31:32 - 31:40 | 1 | Seems like you used yield instead of yield* inside this Effect.gen.

yield Effect.never
32:4 - 32:22 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield.

function
36:61 - 36:69 | 1 | Seems like you used yield instead of yield* inside this Effect.gen.

yield Effect.never
37:4 - 37:22 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield.

function
41:48 - 41:56 | 1 | Seems like you used yield instead of yield* inside this Effect.gen.

yield Effect.never
42:4 - 42:22 | 1 | When yielding Effects inside Effect.gen, you should use yield* instead of yield."
`;

exports[`Diagnostic multipleEffectVersions > multipleEffectVersions.ts > diagnostic output 1`] = `""`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect.ts > available codefixes list 1`] = `
"effect/floatingEffect_skipFile from 76 to 102
effect/floatingEffect_skipFile from 104 to 116
effect/floatingEffect_skipFile from 205 to 217"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect.ts > code fix effect/floatingEffect_skipFile  output for range 76 - 102 1`] = `
"/** @effect-diagnostics effect/floatingEffect:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.succeed(1)

Effect.succeed("floating")

Effect.never

Effect.runPromise(Effect.gen(function*(){
    const thisIsFine = Effect.succeed(1)
    Effect.never
}))

Effect.runPromise(Effect.gen(function*(){
    yield* Effect.succeed(1).pipe(Effect.fork)
    // ^- This is fine, returns a fiber runtime
}))

export function constructorFunction(this: { boot: Effect.Effect<void>}){
    this.boot = Effect.void
    // ^- This is fine, its another way to perform an assignment
}

const main = Effect.gen(function*(){
    yield* Effect.exit(Effect.void)
    // ^- This is fine, returns an exit
})
"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect.ts > code fix effect/floatingEffect_skipFile  output for range 104 - 116 1`] = `
"/** @effect-diagnostics effect/floatingEffect:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.succeed(1)

Effect.succeed("floating")

Effect.never

Effect.runPromise(Effect.gen(function*(){
    const thisIsFine = Effect.succeed(1)
    Effect.never
}))

Effect.runPromise(Effect.gen(function*(){
    yield* Effect.succeed(1).pipe(Effect.fork)
    // ^- This is fine, returns a fiber runtime
}))

export function constructorFunction(this: { boot: Effect.Effect<void>}){
    this.boot = Effect.void
    // ^- This is fine, its another way to perform an assignment
}

const main = Effect.gen(function*(){
    yield* Effect.exit(Effect.void)
    // ^- This is fine, returns an exit
})
"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect.ts > code fix effect/floatingEffect_skipFile  output for range 205 - 217 1`] = `
"/** @effect-diagnostics effect/floatingEffect:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.succeed(1)

Effect.succeed("floating")

Effect.never

Effect.runPromise(Effect.gen(function*(){
    const thisIsFine = Effect.succeed(1)
    Effect.never
}))

Effect.runPromise(Effect.gen(function*(){
    yield* Effect.succeed(1).pipe(Effect.fork)
    // ^- This is fine, returns a fiber runtime
}))

export function constructorFunction(this: { boot: Effect.Effect<void>}){
    this.boot = Effect.void
    // ^- This is fine, its another way to perform an assignment
}

const main = Effect.gen(function*(){
    yield* Effect.exit(Effect.void)
    // ^- This is fine, returns an exit
})
"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect_disabled.ts > available codefixes list 1`] = `
"effect/floatingEffect_skipFile from 98 to 115
effect/floatingEffect_skipFile from 246 to 263
effect/floatingEffect_skipFile from 326 to 343"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect_disabled.ts > code fix effect/floatingEffect_skipFile  output for range 98 - 115 1`] = `
"/** @effect-diagnostics effect/floatingEffect:skip-file */
/** @effect-diagnostics effect/floatingEffect:warning */
import * as Effect from "effect/Effect"

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:off */

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:error */

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:suggestion */

Effect.succeed(1)

"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect_disabled.ts > code fix effect/floatingEffect_skipFile  output for range 246 - 263 1`] = `
"/** @effect-diagnostics effect/floatingEffect:skip-file */
/** @effect-diagnostics effect/floatingEffect:warning */
import * as Effect from "effect/Effect"

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:off */

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:error */

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:suggestion */

Effect.succeed(1)

"
`;

exports[`Diagnostic quickfixes floatingEffect > floatingEffect_disabled.ts > code fix effect/floatingEffect_skipFile  output for range 326 - 343 1`] = `
"/** @effect-diagnostics effect/floatingEffect:skip-file */
/** @effect-diagnostics effect/floatingEffect:warning */
import * as Effect from "effect/Effect"

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:off */

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:error */

Effect.succeed(1)

/** @effect-diagnostics effect/floatingEffect:suggestion */

Effect.succeed(1)

"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_arrowReturnType.ts > available codefixes list 1`] = `"effect/missingEffectContext_skipFile from 703 to 740"`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_arrowReturnType.ts > code fix effect/missingEffectContext_skipFile  output for range 703 - 740 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"
import * as Scope from "effect/Scope"

// should not trigger
export const test: {
    <A, E, R>(eff: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>>
 } = <A, E, R>(eff: Effect.Effect<A, E, R>) => {
    return Effect.void.pipe(Effect.andThen(eff), Effect.scoped)
 }

// same as before
export const test2: {
    <A, E, R>(eff: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>>
 } = <A, E, R>(eff: Effect.Effect<A, E, R>) => Effect.void.pipe(Effect.andThen(eff), Effect.scoped)

// should error
// @ts-expect-error
export const test3 = <A, E, R>(eff: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>> => Effect.void.pipe(Effect.andThen(eff))
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_callExpression.ts > available codefixes list 1`] = `
"effect/missingEffectContext_skipFile from 507 to 525
effect/missingEffectContext_skipFile from 678 to 696"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_callExpression.ts > code fix effect/missingEffectContext_skipFile  output for range 507 - 525 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceB>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceB>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

function testFn(effect: Effect.Effect<number>){
    return effect
}

// @ts-expect-error
testFn(effectWithServices)

function testFnWithServiceAB(effect: Effect.Effect<number, never, ServiceA | ServiceB>){
    return effect
}

// @ts-expect-error
testFnWithServiceAB(effectWithServices)

"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_callExpression.ts > code fix effect/missingEffectContext_skipFile  output for range 678 - 696 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceB>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceB>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

function testFn(effect: Effect.Effect<number>){
    return effect
}

// @ts-expect-error
testFn(effectWithServices)

function testFnWithServiceAB(effect: Effect.Effect<number, never, ServiceA | ServiceB>){
    return effect
}

// @ts-expect-error
testFnWithServiceAB(effectWithServices)

"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_conciseBody.ts > available codefixes list 1`] = `"effect/missingEffectContext_skipFile from 287 to 305"`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_conciseBody.ts > code fix effect/missingEffectContext_skipFile  output for range 287 - 305 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA>

//@ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithServices

"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_lazy.ts > available codefixes list 1`] = `"effect/missingEffectContext_skipFile from 779 to 830"`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_lazy.ts > code fix effect/missingEffectContext_skipFile  output for range 779 - 830 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

export const useSpan: {
    <A, E, R>(evaluate: () => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>
  } = <A, E, R>(...args: [evaluate: () => Effect.Effect<A, E, R>]  ): Effect.Effect<A, E, R> => {
    const evaluate: () => Effect.Effect<A, E, R> = args[args.length - 1]
    return Effect.onExit(evaluate(), () => Effect.void)
  }

  
export const useSpan_invalid: {
  <A, E, R>(evaluate: () => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>
} = <A, E, R>(...args: [evaluate: () => Effect.Effect<A, E, R>]  ): Effect.Effect<A, E, R> => {
  const evaluate: () => Effect.Effect<A, E, R | ServiceA> = args[args.length - 1]
  // @ts-expect-error
  return Effect.onExit(evaluate(), () => Effect.void)
}
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_plainAssignment.ts > available codefixes list 1`] = `
"effect/missingEffectContext_skipFile from 551 to 569
effect/missingEffectContext_skipFile from 648 to 663
effect/missingEffectContext_skipFile from 863 to 891
effect/missingEffectContext_skipFile from 1168 to 1186
effect/missingEffectContext_skipFile from 1035 to 1050"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_plainAssignment.ts > code fix effect/missingEffectContext_skipFile  output for range 551 - 569 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Context from "effect/Context"
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllServices: Effect.Effect<number> = effectWithServices

// @ts-expect-error
export const missingServiceC: Effect.Effect<number, never, ServiceA | ServiceB> = effectWithServices

export interface EffectSubtyping<A> extends Effect.Effect<A, never, ServiceA | ServiceB> {}

// @ts-expect-error
export const missingServiceCWithSubtyping: EffectSubtyping<number> = effectWithServices

export function missingServiceWithGenericType<A>(service: A){
    // @ts-expect-error
    const missingServiceA: Effect.Effect<Context.Context<A>> = Effect.context<A>()
    return missingServiceA
}

// @ts-expect-error
const _ = effectWithServices satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_plainAssignment.ts > code fix effect/missingEffectContext_skipFile  output for range 648 - 663 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Context from "effect/Context"
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllServices: Effect.Effect<number> = effectWithServices

// @ts-expect-error
export const missingServiceC: Effect.Effect<number, never, ServiceA | ServiceB> = effectWithServices

export interface EffectSubtyping<A> extends Effect.Effect<A, never, ServiceA | ServiceB> {}

// @ts-expect-error
export const missingServiceCWithSubtyping: EffectSubtyping<number> = effectWithServices

export function missingServiceWithGenericType<A>(service: A){
    // @ts-expect-error
    const missingServiceA: Effect.Effect<Context.Context<A>> = Effect.context<A>()
    return missingServiceA
}

// @ts-expect-error
const _ = effectWithServices satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_plainAssignment.ts > code fix effect/missingEffectContext_skipFile  output for range 863 - 891 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Context from "effect/Context"
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllServices: Effect.Effect<number> = effectWithServices

// @ts-expect-error
export const missingServiceC: Effect.Effect<number, never, ServiceA | ServiceB> = effectWithServices

export interface EffectSubtyping<A> extends Effect.Effect<A, never, ServiceA | ServiceB> {}

// @ts-expect-error
export const missingServiceCWithSubtyping: EffectSubtyping<number> = effectWithServices

export function missingServiceWithGenericType<A>(service: A){
    // @ts-expect-error
    const missingServiceA: Effect.Effect<Context.Context<A>> = Effect.context<A>()
    return missingServiceA
}

// @ts-expect-error
const _ = effectWithServices satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_plainAssignment.ts > code fix effect/missingEffectContext_skipFile  output for range 1035 - 1050 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Context from "effect/Context"
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllServices: Effect.Effect<number> = effectWithServices

// @ts-expect-error
export const missingServiceC: Effect.Effect<number, never, ServiceA | ServiceB> = effectWithServices

export interface EffectSubtyping<A> extends Effect.Effect<A, never, ServiceA | ServiceB> {}

// @ts-expect-error
export const missingServiceCWithSubtyping: EffectSubtyping<number> = effectWithServices

export function missingServiceWithGenericType<A>(service: A){
    // @ts-expect-error
    const missingServiceA: Effect.Effect<Context.Context<A>> = Effect.context<A>()
    return missingServiceA
}

// @ts-expect-error
const _ = effectWithServices satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_plainAssignment.ts > code fix effect/missingEffectContext_skipFile  output for range 1168 - 1186 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Context from "effect/Context"
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllServices: Effect.Effect<number> = effectWithServices

// @ts-expect-error
export const missingServiceC: Effect.Effect<number, never, ServiceA | ServiceB> = effectWithServices

export interface EffectSubtyping<A> extends Effect.Effect<A, never, ServiceA | ServiceB> {}

// @ts-expect-error
export const missingServiceCWithSubtyping: EffectSubtyping<number> = effectWithServices

export function missingServiceWithGenericType<A>(service: A){
    // @ts-expect-error
    const missingServiceA: Effect.Effect<Context.Context<A>> = Effect.context<A>()
    return missingServiceA
}

// @ts-expect-error
const _ = effectWithServices satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_returnSignature.ts > available codefixes list 1`] = `
"effect/missingEffectContext_skipFile from 489 to 514
effect/missingEffectContext_skipFile from 601 to 619
effect/missingEffectContext_skipFile from 746 to 764"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_returnSignature.ts > code fix effect/missingEffectContext_skipFile  output for range 489 - 514 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export function testFn(): Effect.Effect<number> {
    // @ts-expect-error
    return effectWithServices
}
 
// @ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithServices

// @ts-expect-error
export const conciseBodyMissingServiceC: () => Effect.Effect<number, never, ServiceA | ServiceB> = () => effectWithServices
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_returnSignature.ts > code fix effect/missingEffectContext_skipFile  output for range 601 - 619 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export function testFn(): Effect.Effect<number> {
    // @ts-expect-error
    return effectWithServices
}
 
// @ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithServices

// @ts-expect-error
export const conciseBodyMissingServiceC: () => Effect.Effect<number, never, ServiceA | ServiceB> = () => effectWithServices
"
`;

exports[`Diagnostic quickfixes missingEffectContext > missingEffectContext_returnSignature.ts > code fix effect/missingEffectContext_skipFile  output for range 746 - 764 1`] = `
"/** @effect-diagnostics effect/missingEffectContext:skip-file */
import * as Effect from "effect/Effect"

class ServiceA extends Effect.Service<ServiceA>()("ServiceA", {
    succeed: { a: 1}
}){}

class ServiceB extends Effect.Service<ServiceB>()("ServiceB", {
    succeed: { a: 2}
}){}

class ServiceC extends Effect.Service<ServiceC>()("ServiceC", {
    succeed: { a: 3}
}){}

declare const effectWithServices: Effect.Effect<number, never, ServiceA | ServiceB | ServiceC >

export function testFn(): Effect.Effect<number> {
    // @ts-expect-error
    return effectWithServices
}
 
// @ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithServices

// @ts-expect-error
export const conciseBodyMissingServiceC: () => Effect.Effect<number, never, ServiceA | ServiceB> = () => effectWithServices
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_callExpression.ts > available codefixes list 1`] = `
"effect/missingEffectError_skipFile from 401 to 417
effect/missingEffectError_skipFile from 559 to 575"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_callExpression.ts > code fix effect/missingEffectError_skipFile  output for range 401 - 417 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

function testFn(effect: Effect.Effect<number>){
    return effect
}

// @ts-expect-error
testFn(effectWithErrors)

function testFnWithServiceAB(effect: Effect.Effect<number, ErrorA | ErrorB>){
    return effect
}

// @ts-expect-error
testFnWithServiceAB(effectWithErrors)
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_callExpression.ts > code fix effect/missingEffectError_skipFile  output for range 559 - 575 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

function testFn(effect: Effect.Effect<number>){
    return effect
}

// @ts-expect-error
testFn(effectWithErrors)

function testFnWithServiceAB(effect: Effect.Effect<number, ErrorA | ErrorB>){
    return effect
}

// @ts-expect-error
testFnWithServiceAB(effectWithErrors)
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_plainAssignment.ts > available codefixes list 1`] = `
"effect/missingEffectError_skipFile from 403 to 419
effect/missingEffectError_skipFile from 496 to 509
effect/missingEffectError_skipFile from 685 to 711
effect/missingEffectError_skipFile from 964 to 980
effect/missingEffectError_skipFile from 849 to 862"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_plainAssignment.ts > code fix effect/missingEffectError_skipFile  output for range 403 - 419 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllErrors: Effect.Effect<number> = effectWithErrors

// @ts-expect-error
export const missingErrorC: Effect.Effect<number, ErrorA | ErrorB> = effectWithErrors

export interface EffectSubtyping<A> extends Effect.Effect<A, ErrorA | ErrorB> {}

// @ts-expect-error
export const missingErrorCWithSubtyping: EffectSubtyping<number> = effectWithErrors

export function missingErrorWithGenericType<A>(error: A){
    // @ts-expect-error
    const missingErrorA: Effect.Effect<never> = Effect.fail(error)
    return missingErrorA
}

// @ts-expect-error
const _ = effectWithErrors satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_plainAssignment.ts > code fix effect/missingEffectError_skipFile  output for range 496 - 509 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllErrors: Effect.Effect<number> = effectWithErrors

// @ts-expect-error
export const missingErrorC: Effect.Effect<number, ErrorA | ErrorB> = effectWithErrors

export interface EffectSubtyping<A> extends Effect.Effect<A, ErrorA | ErrorB> {}

// @ts-expect-error
export const missingErrorCWithSubtyping: EffectSubtyping<number> = effectWithErrors

export function missingErrorWithGenericType<A>(error: A){
    // @ts-expect-error
    const missingErrorA: Effect.Effect<never> = Effect.fail(error)
    return missingErrorA
}

// @ts-expect-error
const _ = effectWithErrors satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_plainAssignment.ts > code fix effect/missingEffectError_skipFile  output for range 685 - 711 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllErrors: Effect.Effect<number> = effectWithErrors

// @ts-expect-error
export const missingErrorC: Effect.Effect<number, ErrorA | ErrorB> = effectWithErrors

export interface EffectSubtyping<A> extends Effect.Effect<A, ErrorA | ErrorB> {}

// @ts-expect-error
export const missingErrorCWithSubtyping: EffectSubtyping<number> = effectWithErrors

export function missingErrorWithGenericType<A>(error: A){
    // @ts-expect-error
    const missingErrorA: Effect.Effect<never> = Effect.fail(error)
    return missingErrorA
}

// @ts-expect-error
const _ = effectWithErrors satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_plainAssignment.ts > code fix effect/missingEffectError_skipFile  output for range 849 - 862 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllErrors: Effect.Effect<number> = effectWithErrors

// @ts-expect-error
export const missingErrorC: Effect.Effect<number, ErrorA | ErrorB> = effectWithErrors

export interface EffectSubtyping<A> extends Effect.Effect<A, ErrorA | ErrorB> {}

// @ts-expect-error
export const missingErrorCWithSubtyping: EffectSubtyping<number> = effectWithErrors

export function missingErrorWithGenericType<A>(error: A){
    // @ts-expect-error
    const missingErrorA: Effect.Effect<never> = Effect.fail(error)
    return missingErrorA
}

// @ts-expect-error
const _ = effectWithErrors satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_plainAssignment.ts > code fix effect/missingEffectError_skipFile  output for range 964 - 980 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export const noError: Effect.Effect<number> = Effect.succeed(1)

// @ts-expect-error
export const missingAllErrors: Effect.Effect<number> = effectWithErrors

// @ts-expect-error
export const missingErrorC: Effect.Effect<number, ErrorA | ErrorB> = effectWithErrors

export interface EffectSubtyping<A> extends Effect.Effect<A, ErrorA | ErrorB> {}

// @ts-expect-error
export const missingErrorCWithSubtyping: EffectSubtyping<number> = effectWithErrors

export function missingErrorWithGenericType<A>(error: A){
    // @ts-expect-error
    const missingErrorA: Effect.Effect<never> = Effect.fail(error)
    return missingErrorA
}

// @ts-expect-error
const _ = effectWithErrors satisfies Effect.Effect<number, never, never>
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_returnSignature.ts > available codefixes list 1`] = `
"effect/missingEffectError_skipFile from 383 to 406
effect/missingEffectError_skipFile from 493 to 509
effect/missingEffectError_skipFile from 625 to 641"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_returnSignature.ts > code fix effect/missingEffectError_skipFile  output for range 383 - 406 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export function testFn(): Effect.Effect<number> {
    // @ts-expect-error
    return effectWithErrors
}
 
// @ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithErrors

// @ts-expect-error
export const conciseBodyMissingServiceC: () => Effect.Effect<number, ErrorA | ErrorB> = () => effectWithErrors
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_returnSignature.ts > code fix effect/missingEffectError_skipFile  output for range 493 - 509 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export function testFn(): Effect.Effect<number> {
    // @ts-expect-error
    return effectWithErrors
}
 
// @ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithErrors

// @ts-expect-error
export const conciseBodyMissingServiceC: () => Effect.Effect<number, ErrorA | ErrorB> = () => effectWithErrors
"
`;

exports[`Diagnostic quickfixes missingEffectError > missingEffectError_returnSignature.ts > code fix effect/missingEffectError_skipFile  output for range 625 - 641 1`] = `
"/** @effect-diagnostics effect/missingEffectError:skip-file */
import * as Effect from "effect/Effect"
import * as Data from "effect/Data"

class ErrorA extends Data.Error<{
    a: 1
}>{}

class ErrorB extends Data.Error<{
    a: 2
}>{}

class ErrorC extends Data.Error<{
    a: 3
}>{}

declare const effectWithErrors: Effect.Effect<number, ErrorA | ErrorB | ErrorC>

export function testFn(): Effect.Effect<number> {
    // @ts-expect-error
    return effectWithErrors
}
 
// @ts-expect-error
export const conciseBody: () => Effect.Effect<number> = () => effectWithErrors

// @ts-expect-error
export const conciseBodyMissingServiceC: () => Effect.Effect<number, ErrorA | ErrorB> = () => effectWithErrors
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > available codefixes list 1`] = `
"effect/missingStarInYieldEffectGen_skipFile from 172 to 180
effect/missingStarInYieldEffectGen_skipFile from 283 to 291
effect/missingStarInYieldEffectGen_skipFile from 691 to 699
effect/missingStarInYieldEffectGen_skipFile from 812 to 820
effect/missingStarInYieldEffectGen_skipFile from 920 to 928
effect/missingStarInYieldEffectGen_skipFile from 458 to 466
missingStarInYieldEffectGen_fix from 189 to 212
effect/missingStarInYieldEffectGen_skipFile from 189 to 212
missingStarInYieldEffectGen_fix from 300 to 323
effect/missingStarInYieldEffectGen_skipFile from 300 to 323
missingStarInYieldEffectGen_fix from 328 to 351
effect/missingStarInYieldEffectGen_skipFile from 328 to 351
missingStarInYieldEffectGen_fix from 708 to 726
effect/missingStarInYieldEffectGen_skipFile from 708 to 726
missingStarInYieldEffectGen_fix from 829 to 847
effect/missingStarInYieldEffectGen_skipFile from 829 to 847
missingStarInYieldEffectGen_fix from 937 to 955
effect/missingStarInYieldEffectGen_skipFile from 937 to 955
missingStarInYieldEffectGen_fix from 479 to 502
effect/missingStarInYieldEffectGen_skipFile from 479 to 502"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 172 - 180 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 189 - 212 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 283 - 291 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 300 - 323 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 328 - 351 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 458 - 466 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 479 - 502 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 691 - 699 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 708 - 726 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 812 - 820 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 829 - 847 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 920 - 928 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix effect/missingStarInYieldEffectGen_skipFile  output for range 937 - 955 1`] = `
"/** @effect-diagnostics effect/missingStarInYieldEffectGen:skip-file */
import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 189 - 212 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 300 - 323 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield* Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 328 - 351 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield* Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 479 - 502 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield* Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 708 - 726 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield* Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 829 - 847 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield* Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield Effect.never
})
"
`;

exports[`Diagnostic quickfixes missingStarInYieldEffectGen > missingStarInYieldEffectGen.ts > code fix missingStarInYieldEffectGen_fix  output for range 937 - 955 1`] = `
"import * as Effect from "effect/Effect"

const noError = Effect.gen(function*(){
    yield* Effect.succeed(1)
})

// @ts-expect-error
const missingStarInYield = Effect.gen(function*(){
    yield Effect.succeed(1)
})

// @ts-expect-error
const missingStarInMultipleYield = Effect.gen(function*(){
    yield Effect.succeed(1)
    yield Effect.succeed(2)
})

const missingStarInInnerYield = Effect.gen(function*(){
    // @ts-expect-error
    yield* Effect.gen(function*(){
        yield Effect.succeed(1)
    })
})

export function* effectInsideStandardGenerator(){
    yield Effect.never
    // ^- this is fine, not inside an effect gen
}

// @ts-expect-error
const effectFnUsage = Effect.fn(function*(){
    yield Effect.never
})

// @ts-expect-error
const tracedEffectFnUsage = Effect.fn("tracedEffectFnUsage")(function*(){
    yield Effect.never
})

// @ts-expect-error
const untracedEffectFnUsage = Effect.fnUntraced(function*(){
    yield* Effect.never
})
"
`;

exports[`Diagnostic quickfixes multipleEffectVersions > multipleEffectVersions.ts > available codefixes list 1`] = `""`;

exports[`Diagnostic quickfixes unnecessaryEffectGen > unnecessaryEffectGen.ts > available codefixes list 1`] = `
"unnecessaryEffectGen_fix from 291 to 356
effect/unnecessaryEffectGen_skipFile from 291 to 356"
`;

exports[`Diagnostic quickfixes unnecessaryEffectGen > unnecessaryEffectGen.ts > code fix effect/unnecessaryEffectGen_skipFile  output for range 291 - 356 1`] = `
"/** @effect-diagnostics effect/unnecessaryEffectGen:skip-file */
import * as Effect from "effect/Effect"

export const shouldNotRant = Effect.gen(function* () {
    yield* Effect.succeed(true)
    return yield* Effect.succeed(42)
})

export const shouldNotRaiseForNonEffect = Effect.gen(function* () {
    return 42
})

export const shouldRaiseForSingle = Effect.gen(function* () {
    return yield* Effect.succeed(42)
})
"
`;

exports[`Diagnostic quickfixes unnecessaryEffectGen > unnecessaryEffectGen.ts > code fix unnecessaryEffectGen_fix  output for range 291 - 356 1`] = `
"import * as Effect from "effect/Effect"

export const shouldNotRant = Effect.gen(function* () {
    yield* Effect.succeed(true)
    return yield* Effect.succeed(42)
})

export const shouldNotRaiseForNonEffect = Effect.gen(function* () {
    return 42
})

export const shouldRaiseForSingle = Effect.succeed(42)
"
`;

exports[`Diagnostic quickfixes unnecessaryEffectGen > unnecessaryEffectGen_ifBlock.ts > available codefixes list 1`] = `""`;

exports[`Diagnostic unnecessaryEffectGen > unnecessaryEffectGen.ts > diagnostic output 1`] = `
"Effect.gen(function* () {
    return yield* Effect.succeed(42)
})
12:36 - 14:2 | 2 | This Effect.gen contains a single return statement."
`;

exports[`Diagnostic unnecessaryEffectGen > unnecessaryEffectGen_ifBlock.ts > diagnostic output 1`] = `""`;
