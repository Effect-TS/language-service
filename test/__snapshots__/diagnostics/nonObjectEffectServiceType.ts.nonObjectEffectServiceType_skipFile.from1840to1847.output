// code fix nonObjectEffectServiceType_skipFile  output for range 1840 - 1847
/** @effect-diagnostics nonObjectEffectServiceType:skip-file */
import * as Effect from "effect/Effect"

// should not warn
export class ObjectService extends Effect.Service<ObjectService>()("ObjectService", {
  effect: Effect.succeed({})
}) {}

// should warn on "effect" key because it returns an effect that resolves to a primitive
export class UsesStringValueUnion extends Effect.Service<UsesStringValueUnion>()("UsesStringValueUnion", {
  // @ts-expect-error
  effect: Effect.succeed("test" as ("test" | "other"))
}) {}

// should warn on "effect" key because it returns an effect that resolves to a primitive
export class UsesStringValue extends Effect.Service<UsesStringValue>()("UsesStringValue", {
  // @ts-expect-error
  effect: Effect.succeed("test" as const)
}) {}

// should warn on "effect" key because it returns a function that returns an effect that resolves to a primitive
export class UsesStringValueLazyEffect
  extends Effect.Service<UsesStringValueLazyEffect>()("UsesStringValueLazyEffect", {
    // @ts-expect-error
    effect: (_: string) => Effect.succeed("test" as const)
  })
{}

// should warn on "scoped" key because it returns an effect that resolves to a primitive
export class UsesStringValueScoped extends Effect.Service<UsesStringValueScoped>()("UsesStringValueScoped", {
  // @ts-expect-error
  scoped: Effect.succeed("test" as const)
}) {}

// should warn on "scoped" key because it returns a function that returns an effect that resolves to a primitive
export class UsesStringValueLazyScoped
  extends Effect.Service<UsesStringValueLazyScoped>()("UsesStringValueLazyScoped", {
    // @ts-expect-error
    scoped: (_: string) => Effect.succeed("test" as const)
  })
{}

// should warn on "succeed" key because it is a primitive
export class UsesStringValueSucceeds extends Effect.Service<UsesStringValueSucceeds>()("UsesStringValueSucceeds", {
  // @ts-expect-error
  succeed: "test" as const
}) {}

// should warn on "sync" key because it is function that returns a primitive
export class UsesStringValueSync extends Effect.Service<UsesStringValueSync>()("UsesStringValueSync", {
  // @ts-expect-error
  sync: () => "test" as const
}) {}
